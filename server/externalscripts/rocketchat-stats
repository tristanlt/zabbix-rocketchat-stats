#!/usr/bin/env python3
# coding: utf-8
# 24 Jan 2018 - Tristan Le Toullec
#
# This file is part of zabbix-rocketchat-stats
# (https://github.com/tristanlt/zabbix-rocketchat-stats)
#
#    zabbix-rocketchat-stats is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    zabbix-rocketchat-stats is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with zabbix-rocketchat-stats.  If not, see <http://www.gnu.org/licenses/>.
#

import requests
import logging
import json
import sys
import pprint
import os
import pickle
import time
import stat

# logging.basicConfig(level=logging.DEBUG)

# maximum accepted age of the cache file
max_file_age = 90


def file_age_in_seconds(pathname):
    return time.time() - os.stat(pathname)[stat.ST_MTIME]


def statistics(api_url, headers_api, statsname):
    """
    print JSON with statistics from API/v1 
    """

    endpoint = "%s/v1/statistics" % (api_url)

    EXECUTABLE = os.path.basename(__file__)
    statusfile = "/tmp/%s_%s.pickle" % (EXECUTABLE, os.getuid())

    data = {}
    reload_data = True
    if os.path.exists(statusfile):
        try:
            data = pickle.load(open(statusfile, "rb"))
        except:
            logging.critical("ERROR: unable to read statusfile %s" % statusfile)
        file_age = file_age_in_seconds(statusfile)
        if file_age < max_file_age:
            reload_data = False
        else:
            reload_data = True
            os.remove(statusfile)

    if reload_data:
        try:
            r = requests.get(endpoint, headers=headers_api)
        except Exception as e:
            logging.critical("Failed to connect API: %s" % e)
            return None

        try:
            data = r.json()
        except Exception as e:
            logging.critical("Wrong JSON receive from API /v1/statistics, check endpoint (statistics step): %s" % e)
            return None

        try:
            os.umask(0o077)
            pickle.dump(data, open(statusfile, "wb"))
        except Exception as e:
            logging.critical("but storing status to %s failed : %s" % (statusfile, e))

    if statsname == "all":
        pprint.pprint(data['statistics'])
    elif statsname in data['statistics'].keys():
        print(data['statistics'][statsname])


if len(sys.argv) < 5:
    print("rocketchat-stats all|<arg> <api-url> <api-user-id> <api access key>")
    sys.exit(1)

url = sys.argv[2]
headers = {"X-Auth-Token": sys.argv[4],
           "X-User-Id": sys.argv[3]}

statistics(url, headers, sys.argv[1])

# vim: ai et ts=2 shiftwidth=2 expandtab
